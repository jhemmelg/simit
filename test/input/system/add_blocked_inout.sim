element Vertex
  a : float;
  b : float;
end

element Edge
  e : float;
end

extern V : set{Vertex};
extern E : set{Edge}(V,V);

func f(v : Vertex) -> (A : tensor[V,V](tensor[2,2](float)))
  var I2 : tensor[2,2](float) = [1.0, 0.0; 0.0, 1.0];
  A(v, v) = v.b * I2;
end

func g(e : Edge, v : (Vertex*2)) -> (B : tensor[V,V](tensor[2,2](float)))
  var I2 : tensor[2,2](float) = [1.0, 0.0; 0.0, 1.0];
  B(v(0), v(1)) = e.e * I2;
  B(v(1), v(0)) = e.e * I2;
end

func promote(v : Vertex) -> (X : tensor[V](tensor[2](float)))
  var unitVec : tensor[2](float) = [1.0, 1.0]';
  X(v) = v.b * unitVec;
end

func sum_vectors(Y : tensor[V](tensor[2](float)), v : Vertex) -> (y : tensor[V](float))
  y(v) = Y(v)(0) + Y(v)(1);
end

func scale_vector<N>(inout v : vector[N](float), c : float)
  v = c * v;
end

export func main()
  B = map f to V reduce +;
  C = map g to E reduce +;
  A = B + C;
  var X = map promote to V;
  for v in V
    scale_vector(X(v), 2.0);
  end
  Y = A * X;
  V.a = map sum_vectors(Y) to V;
  scale_vector(V.a, 0.5);
end
