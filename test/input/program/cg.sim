element Point
  b  : float;
  c  : float;
  id : int;
end

element Spring
  a : float;
end

extern points  : set{Point};
extern springs : set{Spring}(points,points);

func f(s : Spring, p : (Point*2)) -> (A : tensor[points,points](float))
  A(p(0),p(0)) =  s.a;
  A(p(0),p(1)) = -s.a;
  A(p(1),p(0)) = -s.a;
  A(p(1),p(1)) =  s.a;
end

func eye(p : Point) -> (I : tensor[points,points](float))
  I(p,p) = 1.0;
end

func cg<S>(A : tensor[S,S](float), b : tensor[S](float)) -> x : tensor[S](float)
  const xguess : tensor[S](float) = 0.0;

  tol = 1e-6;
  maxiters = 5;
  var r = b - (A*xguess);
  var p = r;
  var iter = 0;
  x = xguess;

  var normr = norm(r);
  while (normr > tol) and (iter < maxiters)
    Ap = A * p;

    denom = dot(p, Ap);

    alpha = dot(r, r) / denom;
    x = x + alpha*p;

    oldrsqn = dot(r,r);
    r = r - alpha * Ap;
    newrsqn = dot(r,r);
    beta = newrsqn/oldrsqn;
    p = r + beta*p;

    normr = norm(r);
    iter = iter + 1;
  end
end

export func main()
  b = points.b;
  I = map eye to points reduce +;
  A = I - 0.01 * (map f to springs reduce +);
  points.c = cg(A, b);
end
